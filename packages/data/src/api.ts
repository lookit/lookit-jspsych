import {
  ApiPromise,
  Child,
  PastSession,
  Response,
  ResponseAttrsUpdate,
  ResponseUpdate,
  Study,
} from "./types";
import { get, getUuids, patch } from "./utils";

const CONFIG = <const>{ ...getUuids() };
const promises: ApiPromise[] = [];

/**
 * Collect all API call promises into an array to be checked with finish().
 *
 * @param promise - Promise generated by API calls.
 * @returns Provided promise.
 */
const deposit = <T extends ApiPromise>(promise: T) => {
  promises.push(promise);
  return promise;
};

/**
 * Checks to see if all API calls have completed.
 *
 * @returns A Promise that, if/when resolved, confirms that all API calls have
 *   completed.
 */
export const finish = () => {
  return Promise.all(promises);
};

/**
 * Gets the Child object for this study session from the lookit-api.
 *
 * @returns API Promise containing the Child object.
 */
export const retrieveChild = () => {
  return deposit(get<Child>(`children/${CONFIG.child}/`));
};

/**
 * Gets a list of all past Session (response) objects for this Study and Child
 * from the lookit-api.
 *
 * @param uuid - Current Response UUID.
 * @returns Promise containing list of all Past Session objects.
 */
export const retrievePastSessions = (uuid: string) => {
  return deposit(get<PastSession[]>(`past-sessions/${uuid}/`));
};

/**
 * Gets the Study object from the lookit-api.
 *
 * @returns API Promise containing the Study object.
 */
export const retrieveStudy = () => {
  return deposit(get<Study>(`studies/${CONFIG.study}/`));
};

/**
 * Gets Response (Session) for the provided response UUID.
 *
 * @param uuid - Response UUID.
 * @returns Promise containing the Response object.
 */
export const retrieveResponse = (uuid: string) => {
  return deposit(get<Response>(`responses/${uuid}/`));
};

/**
 * Updates an existing Response object in the lookit-api.
 *
 * @param uuid - Response UUID.
 * @param data - Object containing fields to be updated.
 * @returns Promise containing the updated Response object.
 */
export const updateResponse = (uuid: string, data: ResponseAttrsUpdate) => {
  return deposit(
    patch<ResponseUpdate, Response>(`responses/${uuid}/`, {
      id: uuid,
      type: "responses",
      attributes: data,
    }),
  );
};
