import {
  ApiPromise,
  Child,
  PastSession,
  Response,
  ResponseAttrsUpdate,
  ResponseUpdate,
  Study,
} from "./types";
import { get, getUuids, patch } from "./utils";

const CONFIG = <const>{ ...getUuids() };
const promises: ApiPromise[] = [];

/**
 * Collect all API calls into an array to be checked with finish().
 *
 * @param promise - Promise generated by API calls.
 * @returns Provided promise.
 */
function deposit<T extends ApiPromise>(promise: T) {
  promises.push(promise);
  return promise;
}

/**
 * Checks to see if all API calls have completed.
 *
 * @returns A Promise, when completed, confirms all API calls have completed.
 */
export function finish() {
  return Promise.all(promises);
}

/**
 * Gets Child.
 *
 * @returns API Promise containing Child.
 */
export function retrieveChild() {
  return deposit(get<Child>(`children/${CONFIG.child}/`));
}

/**
 * Get a list of past Sessions for this Study and Child.
 *
 * @param uuid - Current Response UUID.
 * @returns Promise containing list of Past Sessions.
 */
export function retrievePastSessions(uuid: string) {
  return deposit(get<PastSession[]>(`past-sessions/${uuid}/`));
}

/**
 * Gets Study.
 *
 * @returns API Promise containing Study.
 */
export function retrieveStudy() {
  return deposit(get<Study>(`studies/${CONFIG.study}/`));
}

/**
 * Gets Response (or Session) of the provided UUID.
 *
 * @param uuid - Response UUID.
 * @returns Promise containing Response.
 */
export function retrieveResponse(uuid: string) {
  return deposit(get<Response>(`responses/${uuid}/`));
}

/**
 * Update Response.
 *
 * @param uuid - Response UUID.
 * @param data - Object containing fields to be updated.
 * @returns Promise containing updated Response.
 */
export function updateResponse(uuid: string, data: ResponseAttrsUpdate) {
  return deposit(
    patch<ResponseUpdate, Response>(`responses/${uuid}/`, {
      id: uuid,
      type: "responses",
      attributes: data,
    }),
  );
}
